/**************************************************************************************************
 GRADLE CONFIG
 *************************************************************************************************/

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

applicationScripts.each {
    apply from: it
}

apply plugin: 'com.android.application'

android {
    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }
    namespace(surveyNamespace)
    compileSdk(compileVersion)

    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        testInstrumentationRunner(instrumentationRunner)
    }

    buildFeatures {
        aidl true
        buildConfig true
    }

    flavorDimensions.add("stage")

    productFlavors {
        primary {
            dimension 'stage'
            versionCode(primaryVersionCode)
            versionName(primaryVersion)
        }

        snapshot {
            dimension 'stage'
            versionCode(snapshotVersionCode)
            versionName(snapshotVersion)
        }
    }

    signingConfigs {
        release {
            if (shouldSign) {
                storeFile file(signStoreFilePath)
                storePassword signStorePass
                keyAlias signKeyAlias
                keyPassword signKeyPass
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            if (shouldSign) {
                signingConfig signingConfigs.release
            }
        }
        debug {
            debuggable(true)
            testCoverageEnabled = testCoverage
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

    publishing {
        singleVariant("snapshotDebug")
        singleVariant("primaryRelease")
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
        }
    }
}

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor(0, 'seconds')
        cacheChangingModulesFor(0, 'seconds')
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'org.opendatakit:odkx-rest-interface:2.2.0-SNAPSHOT'

    implementation 'androidx.core:core-splashscreen:1.0.1'
    implementation 'androidx.annotation:annotation:1.7.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.preference:preference:1.2.1'
    implementation 'androidx.fragment:fragment:1.5.7'
    implementation 'com.google.android.material:material:1.7.0'
    
    implementation 'com.google.firebase:firebase-analytics:19.0.2'
    implementation 'com.google.firebase:firebase-crashlytics:18.2.3'

    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(libraryProjectName)
    } else {
        primaryImplementation(group: odkxGroupId, name: libraryPackageName, version: primaryVersion)
        snapshotImplementation(group: odkxGroupId, name: libraryPackageName, version: snapshotVersion)
    }

    if (commonProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(commonProjectName)
    } else {
        primaryImplementation(group: odkxGroupId, name: commonPackageName, version: primaryVersion)
        snapshotImplementation(group: odkxGroupId, name: commonPackageName, version: snapshotVersion)
    }
// Testing-only dependencies
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'

    androidTestImplementation 'androidx.annotation:annotation:1.7.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'org.mockito:mockito-core:2.19.0'
    androidTestImplementation 'com.google.truth:truth:1.1.3'
    androidTestImplementation 'androidx.test:core:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.5.1'


    testImplementation 'junit:junit:4.13.2'
}

task grantPermissionForODKXApp {
    dependsOn grantServicesReadExternalStoragePermission
    dependsOn grantServicesWriteExternalStoragePermission
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
